namespace ATMCD64CS
{
    using System;

    public interface IATMCD64CS
    {
        uint AbortAcquisition();
        uint CancelWait();
        uint CoolerOFF();
        uint CoolerON();
        uint DemosaicImage(ushort[] _input, ushort[] _red, ushort[] _green, ushort[] _blue, ref AndorSDK.ColorDemosaicInfo _info);
        uint EnableKeepCleans(int iMode);
        uint FreeInternalMemory();
        uint GetAcquiredData(int[] array, uint size);
        uint GetAcquiredData16(ushort[] array, uint size);
        uint GetAcquiredFloatData(float[] array, uint size);
        uint GetAcquisitionProgress(ref int acc, ref int series);
        uint GetAcquisitionTimings(ref float exposure, ref float accumulate, ref float kinetic);
        uint GetAdjustedRingExposureTimes(int _inumTimes, float[] _fptimes);
        uint GetAllDMAData(int[] array, uint size);
        unsafe uint GetAmpDesc(int index, ref String name, int len);
        unsafe uint GetAmpMaxSpeed(int index, ref float speed);
        uint GetAvailableCameras(ref int totalCameras);
        uint GetBackground(int[] array, uint size);
        uint GetBaselineClamp(ref int state);
        uint GetBitDepth(int channel, ref int depth);
        uint GetCameraEventStatus(ref int cam_status);
        uint GetCameraHandle(int cameraIndex, ref int cameraHandle);
        uint GetCameraInformation(int index, ref int information);
        uint GetCameraSerialNumber(ref int number);
        unsafe uint GetCapabilities(ref AndorSDK.AndorCapabilities caps);
        uint GetControllerCardModel(ref String controllerCardModel);
        uint GetCountConvertWavelengthRange(ref float minval, ref float maxval);
        unsafe uint GetCurrentCamera(ref int cameraHandle);
        unsafe uint GetCYMGShift(ref int _iXshift, ref int _iYshift);
        unsafe uint GetDDGExternalOutputEnabled(uint index, ref uint state);
        unsafe uint GetDDGExternalOutputPolarity(uint index, ref uint state);
        unsafe uint GetDDGExternalOutputStepEnabled(uint index, ref uint state);
        uint GetDDGExternalOutputTime(uint uiIndex, ref UInt64 uiDelay, ref UInt64 uiWidth);
        uint GetDDGGateTime(ref UInt64 uiDelay, ref UInt64 uiWidth);
        unsafe uint GetDDGInsertionDelay(ref uint mode);
        unsafe uint GetDDGIntelligate(ref uint mode);
        unsafe uint GetDDGIOC(ref uint mode);
        uint GetDDGIOCFrequency(ref double frequency);
        uint GetDDGIOCNumber(ref uint number_pulses);
        uint GetDDGIOCNumberRequested(ref uint number_pulses);
        uint GetDDGIOCPeriod(ref UInt64 pulses);
        uint GetDDGIOCPulses(ref int pulses);
        uint GetDDGPulse(double width, double resolution, ref double Delay, ref double Width);
        uint GetDDGStepCoefficients(uint uiIndex, ref double p1, ref double p2);
        unsafe uint GetDDGStepMode(ref uint mode);
        unsafe uint GetDetector(ref int xpixels, ref int ypixels);
        unsafe uint GetDICameraInfo(ref IntPtr info);
        uint GetDualExposureTimes(ref float exposure1, ref float exposure2);
        unsafe uint GetEMAdvanced(ref int state);
        unsafe uint GetEMCCDGain(ref int gain);
        uint GetDDGTTLGateWidth(ref UInt64 opticalWidth, ref UInt64 ttlWidth);
        uint GetDDGIOCTrigger(ref UInt32 trigger);
        uint GetDDGOpticalWidthEnabled(ref UInt32 puiEnabled);
        unsafe uint GetEMGainRange(ref int low, ref int high);
        uint GetExternalTriggerTermination(ref uint mode);
        unsafe uint GetFastestRecommendedVSSpeed(ref int index, ref float speed);
        uint GetFIFOUsage(ref int FIFOusage);
        uint GetFilterMode(ref int mode);
        uint GetFKExposureTime(ref float time);
        uint GetFKVShiftSpeed(int index, ref int speed);
        uint GetFKVShiftSpeedF(int index, ref float speed);
        uint GetFrontEndStatus(ref int status);
        uint GetGateMode(ref int mode);
        unsafe uint GetHardwareVersion(ref uint PCB, ref uint Decode, ref uint dummy1, ref uint dummy2, ref uint CameraFirmwareVersion, ref uint CameraFirmwareBuild);
        uint GetHeadModel(ref String name);
        uint GetHorizontalSpeed(int index, ref int speed);
        unsafe uint GetHSSpeed(int channel, int type, int index, ref float speed);
        uint GetHVflag(ref int bFlag);
        unsafe uint GetID(int devNum, ref int id);
        unsafe uint GetImageFlip(ref int iHFlip, ref int iVFlip);
        unsafe uint GetImageRotate(ref int iRotate);
        uint GetImages(int first, int last, int[] array, uint size, ref int validfirst, ref int validlast);
        uint GetImages16(int first, int last, ushort[] array, uint size, ref int validfirst, ref int validlast);
        uint GetImagesPerDMA(ref uint images);
        uint GetKeepCleanTime(ref float KeepCleanTime);
        unsafe uint GetMaximumBinning(int ReadMode, int HorzVert, ref int MaxBinning);
        unsafe uint GetMaximumExposure(ref float MaxExp);
        unsafe uint GetMCPGain(ref int iVoltage);
        unsafe uint GetMCPGainRange(ref int iLow, ref int iHigh);
        unsafe uint GetMCPGainTable(int iNum, ref int iGain, ref float fPhotoepc);
        unsafe uint GetMCPVoltage(ref int iVoltage);
        uint GetMetaDataInfo(ref AndorSDK.SYSTEMTIME _timeOfStart, ref float _pf_timeFromStart, int _i_index);
        unsafe uint GetMinimumImageLength(ref int MinImageLength);
        unsafe uint GetMinimumNumberInSeries(ref int _i_number);
        uint GetMostRecentColorImage16(uint size, int algorithm, ushort[] red, ushort[] green, ushort[] blue);
        uint GetMostRecentImage(int[] array, uint size);
        uint GetMostRecentImage16(ushort[] array, uint size);
        uint GetMSTimingsData(ref AndorSDK.SYSTEMTIME TimeOfStart, float[] _pfDifferences, int _inoOfimages);
        uint GetMSTimingsEnabled();
        uint GetNewData(int[] array, uint size);
        uint GetNewData16(ushort[] array, uint size);
        uint GetNewData8(byte[] array, uint size);
        uint GetNewFloatData(float[] array, uint size);
        unsafe uint GetNumberADChannels(ref int channels);
        unsafe uint GetNumberAmp(ref int amp);
        unsafe uint GetNumberAvailableImages(ref int first, ref int last);
        unsafe uint GetNumberDDGExternalOutputs(ref int numDevs);
        unsafe uint GetNumberDevices(ref int numDevs);
        uint GetNumberFKVShiftSpeeds(ref int number);
        uint GetNumberHorizontalSpeeds(ref int number);
        unsafe uint GetNumberHSSpeeds(int channel, int type, ref int speeds);
        unsafe uint GetNumberMissedExternalTriggers(uint first, uint last, ushort[] arr);
        uint GetNumberNewImages(ref int first, ref int last);
        uint GetNumberPhotonCountingDivisions(uint[] noOfDivisions);
        unsafe uint GetNumberPreAmpGains(ref int noGains);
        uint GetNumberRingExposureTimes(ref int _ipnumTimes);
        uint GetNumberIO(ref int iNumber);
        uint GetNumberVerticalSpeeds(ref int number);
        uint GetNumberVSAmplitudes(ref int number);
        unsafe uint GetNumberVSSpeeds(ref int speeds);
        uint GetOldestImage(int[] array, uint size);
        uint GetOldestImage16(ushort[] array, uint size);
        uint GetPhosphorStatus(ref int status);
        uint GetPhysicalDMAAddress(ref uint Address1, ref uint Address2);
        unsafe uint GetPixelSize(ref float xSize, ref float ySize);
        uint GetReadOutTime(ref float ReadoutTime);
        unsafe uint GetPreAmpGain(int index, ref float gain);
        unsafe uint GetPreAmpGainText(int index, ref String name, int len);
        uint GetQE(string sensor, float wavelength, uint mode, ref float QE);
        unsafe uint GetRegisterDump(ref int mode);
        uint GetRelativeImageTimes(uint first, uint last, UInt64[] arr, uint size);
        unsafe uint GetRingExposureRange(ref float _fpMin, ref float _fpMax);
        unsafe uint GetSensitivity(int channel, int horzShift, int amplifier, int pa, ref float sensitivity);
        unsafe uint GetShutterMinTimes(ref int minclosingtime, ref int minopeningtime);
        unsafe uint GetSizeOfCircularBuffer(ref int index);
        uint GetSlotBusDeviceFunction(ref int dwSlot, ref int dwBus, ref int dwDevice, ref int dwFunction);
        unsafe uint GetSoftwareVersion(ref uint eprom, ref uint coffile, ref uint vxdrev, ref uint vxdver, ref uint dllrev, ref uint dllver);
        unsafe uint GetSpoolProgress(ref int index);
        uint GetStartUpTime(ref float time);
        uint GetStatus(ref int status);
        uint GetTECStatus(ref int status);
        uint GetTemperature(ref int temperature);
        uint GetTemperatureF(ref float temperature);
        uint GetTemperatureRange(ref int temperature, ref int maxtemp);
        uint GetTemperatureStatus(ref float SensorTemp, ref float TargetTemp, ref float AmbientTemp, ref float CoolerVolts);
        uint GetTotalNumberImagesAcquired(ref int index);
        uint GetIODirection(int index, ref int iDirection);
        uint GetIOLevel(int index, ref int iLevel);
        unsafe uint GetTriggerLevelRange(ref float _fpMin, ref float _fpMax);
        unsafe uint GetVersionInfo(AndorSDK.AT_VersionInfoId _id, ref String _sz_versionInfo, uint _ui32_bufferLen);
        uint GetVerticalSpeed(int index, ref int speed);
        unsafe uint GetVSAmplitudeString(int index, ref string text);
        unsafe uint GetVSAmplitudeFromString(string text, ref int index);
        unsafe uint GetVSAmplitudeString(int index, ref int value);
        unsafe uint GetVSSpeed(int index, ref float speed);
        uint GPIBReceive(int id, short address, ref String text, int size);
        uint GPIBSend(int id, short address, string text);
        uint I2CBurstRead(byte i2cAddress, int nBytes, byte[] data);
        uint I2CBurstWrite(byte i2cAddress, int nBytes, byte[] data);
        uint I2CRead(byte deviceID, byte intAddress, ref byte pdata);
        uint I2CReset();
        uint I2CWrite(byte deviceID, byte intAddress, byte data);
        uint IdAndorDll();
        uint InAuxPort(int port, ref int state);
        uint Initialize(string dir);
        uint InitializeDevice(string dir);
        uint IsAmplifierAvailable(int iamp);
        uint IsReadoutFlippedByAmplifier(int iAmplifier, ref int iFlipped);
        uint IsCoolerOn(ref int _iCoolerStatus);
        uint IsCountConvertModeAvailable(ref int mode);
        uint IsInternalMechanicalShutter(ref int InternalShutter);
        unsafe uint IsPreAmpGainAvailable(int channel, int amplifier, int index, int pa, ref int status);
        unsafe uint IsTriggerModeAvailable(int _itriggerMode);
        uint Merge(int[] array, int nOrder, int nPoint, int nPixel, ref float coeff, int fit, int hbin, ref int output, ref float start, ref float step);
        uint OutAuxPort(int port, int state);
        uint PrepareAcquisition();
        uint SaveAsBmp(string path, string palette, int ymin, int ymax);
        uint SaveAsCommentedSif(string path, string comment);
        uint SaveAsEDF(string _szPath, int _iMode);
        uint SaveAsFITS(string szFileTitle, int type);
        uint SaveAsRaw(string szFileTitle, int type);
        uint SaveAsSif(string path);
        uint SaveAsSPC(string path);
        uint SaveAsTiff(string path, string palette, int position, int type);
        uint SaveAsTiffEx(string path, string palette, int position, int type, int _mode);
        uint SaveEEPROMToFile(string cFileName);
        uint SaveToClipBoard(string palette);
        uint SelectDevice(int devNum);
        uint SendSoftwareTrigger();
        uint SetAccumulationCycleTime(float time);
        uint SetAcqStatusEvent(IntPtr userevent);
        uint SetAcquisitionMode(int mode);
        uint SetAcquisitionType(int type);
        uint SetADChannel(int channel);
        uint SetAdvancedTriggerModeState(int _istate);
        uint SetBackground(int[] array, uint size);
        uint SetBaselineClamp(int state);
        uint SetBaselineOffset(int offset);
        uint SetCameraLinkMode(int mode);
        uint SetCameraStatusEnable(int Enable);
        uint SetChargeShifting(uint NumberRows, uint NumberRepeats);
        uint SetComplexImage(int numAreas, ref int areas);
        uint SetCoolerMode(int mode);
        uint SetCountConvertMode(int mode);
        uint SetCountConvertWavelength(float wavelength);
        uint SetCropMode(int active, int cropheight, int reserved);
        uint SetCurrentCamera(int cameraHandle);
        uint SetCustomTrackHBin(int bin);
        uint SetDACOutput(int iOption, int iResolution, int iValue);
        uint SetDACOutputScale(int iScale);
        uint SetDataType(int type);
        uint SetDDGAddress(byte t0, byte t1, byte t2, byte tt, byte address);
        uint SetDDGExternalOutputEnabled(uint uiIndex, uint state);
        uint SetDDGExternalOutputPolarity(uint uiIndex, uint state);
        uint SetDDGExternalOutputStepEnabled(uint uiIndex, uint state);
        uint SetDDGExternalOutputTime(uint uiIndex, UInt64 uiDelay, UInt64 uiWidth);
        uint SetDDGGain(int gain);
        uint SetDDGGateStep(double step);
        uint SetDDGGateTime(UInt64 uiDelay, UInt64 uiWidth);
        uint SetDDGInsertionDelay(int state);
        uint SetDDGIntelligate(int state);
        uint SetDDGIOC(int state);
        uint SetDDGIOCFrequency(double frequency);
        uint SetDDGIOCNumber(uint number_pulses);
        uint SetDDGIOCPeriod(UInt64 period);
        uint SetDDGIOCTrigger(UInt32 trigger);
        uint SetDDGOpticalWidthEnabled(UInt32 uiEnabled);
        uint SetDDGStepCoefficients(uint mode, double p1, double p2);
        uint SetDDGWidthStepCoefficients(uint mode, double p1, double p2);
        uint SetDDGStepMode(uint mode);
        uint SetDDGWidthStepMode(uint mode);
        uint SetDDGTimes(double t0, double t1, double t2);
        uint SetDDGTriggerMode(int mode);
        uint SetDDGVariableGateStep(int mode, double p1, double p2);
        uint SetDelayGenerator(int board, short address, int type);
        uint SetDMAParameters(int MaxImagesPerDMA, float SecondsPerDMA);
        uint SetDriverEvent(IntPtr driverevent);
        uint SetDualExposureMode(int mode);
        uint SetDualExposureTimes(float expTime1, float expTime2);
        uint SetEMAdvanced(int state);
        uint SetEMCCDGain(int gain);
        uint SetEMClockCompensation(int EMClockCompensationFlag);
        uint SetEMGainMode(int mode);
        uint SetExposureTime(float time);
        uint SetExternalTriggerTermination(uint mode);
        uint SetFanMode(int mode);
        uint SetFastExtTrigger(int mode);
        uint SetFastKinetics(int exposedRows, int seriesLength, float time, int mode, int hbin, int vbin);
        uint SetFastKineticsEx(int exposedRows, int seriesLength, float time, int mode, int hbin, int vbin, int offset);
        uint SetFilterMode(int mode);
        uint SetFilterParameters(int width, float sensitivity, int range, float accept, int smooth, int noise);
        uint SetFKVShiftSpeed(int index);
        uint SetFPDP(int state);
        uint SetFrameTransferMode(int mode);
        uint SetFrontEndEvent(IntPtr driverevent);
        uint SetFullImage(int hbin, int vbin);
        uint SetFVBHBin(int bin);
        uint SetGain(int gain);
        uint SetGate(float delay, float width, float step);
        uint SetGateMode(int gatemode);
        uint SetHighCapacity(int state);
        uint SetHorizontalSpeed(int index);
        uint SetHSSpeed(int type, int index);
        uint SetImage(int hbin, int vbin, int hstart, int hend, int vstart, int vend);
        uint SetImageFlip(int iHFlip, int iVFlip);
        uint SetImageRotate(int iRotate);
        uint SetIsolatedCropMode(int active, int cropheight, int cropwidth, int vbin, int hbin);
        uint SetIsolatedCropModeEx(int active, int cropheight, int cropwidth, int vbin, int hbin, int cropleft, int cropbottom);
        uint SetKineticCycleTime(float time);
        uint SetMCPGain(int iGain);
        uint SetMCPGating(int gating);
        uint SetMessageWindow(IntPtr wnd);
        uint SetMetaData(int state);
        uint SetMultiTrack(int number, int height, int offset, ref int bottom, ref int gap);
        uint SetMultiTrackHBin(int bin);
        uint SetMultiTrackHRange(int _iStart, int _iEnd);
        uint SetNextAddress(int[] data, int lowAdd, int highAdd, int len, int physical);
        uint SetNextAddress16(int[] data, int lowAdd, int highAdd, int len, int physical);
        uint SetNumberAccumulations(int number);
        uint SetNumberKinetics(int number);
        uint SetNumberPrescans(int iNumber);
        uint SetOverlapMode(int mode);
        uint SetOutputAmplifier(int type);
        uint SetPCIMode(int mode, int value);
        uint SetPhosphorEvent(IntPtr driverevent);
        uint SetPhotonCounting(int state);
        uint SetPhotonCountingDivisions(uint noOfDivisions, int[] divisions);
        uint SetPhotonCountingThreshold(int min, int max);
        uint SetPixelMode(int bitdepth, int colormode);
        uint SetPreAmpGain(int index);
        uint SetRandomTracks(int numTracks, int[] areas);
        uint SetReadMode(int mode);
        uint SetReadoutRegisterPacking(uint mode);
        uint SetRegisterDump(int mode);
        uint SetRingExposureTimes(int numTimes, float[] times);
        uint SetSaturationEvent(IntPtr userevent);
        uint SetShutter(int type, int mode, int closingtime, int openingtime);
        uint SetShutterEx(int type, int mode, int closingtime, int openingtime, int ext_mode);
        uint SetShutters(int type, int mode, int closingtime, int openingtime, int ext_type, int ext_mode, int dummy1, int dummy2);
        uint SetSifComment(string comment);
        uint SetSingleTrack(int centre, int height);
        uint SetSingleTrackHBin(int bin);
        uint SetSpool(int active, int method, string path, int framebuffersize);
        uint SetSpoolThreadCount(int count);
        uint SetStorageMode(int mode);
        uint SetTECEvent(IntPtr driverevent);
        uint SetTemperature(int temperature);
        uint SetTriggerInvert(int mode);
        uint SetTriggerLevel(float mode);
        uint SetTriggerMode(int mode);
        uint SetIODirection(int index, int iDirection);
        uint SetIOLevel(int index, int iLevel);
        uint SetUserEvent(IntPtr userevent);
        uint SetUSGenomics(int width, int height);
        uint SetVerticalRowBuffer(int rows);
        uint SetVerticalSpeed(int index);
        uint SetVirtualChip(int state);
        uint SetVSAmplitude(int index);
        uint SetVSSpeed(int index);
        uint ShutDown();
        uint StartAcquisition();
        uint UnMapPhysicalAddress();
        uint WaitForAcquisition();
        uint WaitForAcquisitionByHandle(int cameraHandle);
        uint WaitForAcquisitionByHandleTimeOut(int cameraHandle, int _iTimeOutMs);
        uint WaitForAcquisitionTimeOut(int _iTimeOutMs);
        uint WhiteBalance(ushort[] _wRed, ushort[] _wGreen, ushort[] _wBlue, float[] _fRelR, float[] _fRelB, ref AndorSDK.WhiteBalanceInfo _info);
        uint OA_Initialize(string dir, uint uiFileNameLen);
        uint OA_EnableMode(string pcModeName);
        uint OA_GetModeAcqParams(string pcModeName, ref String pcListOfParams);
        uint OA_GetUserModeNames(ref String pcListOfModes);
        uint OA_GetPreSetModeNames(ref String pcListOfModes);
        unsafe uint OA_GetNumberOfUserModes(ref uint puiNumberOfModes);
        unsafe uint OA_GetNumberOfPreSetModes(ref uint puiNumberOfModes);
        unsafe uint OA_GetNumberOfAcqParams(string pcModeName, ref uint puiNumberOfParams);
        uint OA_AddMode(string pcModeName, uint uiModeNameLen, string pcModeDescription, uint uiModeDescriptionLen);
        uint OA_WriteToFile(string pcFileName, uint uiFileNameLen);
        uint OA_DeleteMode(string pcModeName, uint uiModeNameLen);
        uint OA_SetInt(string pcModeName, string pcModeParam, int iIntValue);
        uint OA_SetFloat(string pcModeName, string pcModeParam, float fFloatValue);
        uint OA_SetString(string pcModeName, string pcModeParam, string pcStringValue, uint uiStringLen);
        unsafe uint OA_GetInt(string pcModeName, string pcModeParam, ref int iIntValue);
        unsafe uint OA_GetFloat(string pcModeName, string pcModeParam, ref float fFloatValue);
        uint OA_GetString(string pcModeName, string pcModeParam, ref String pcStringValue, uint uiStringLen);
        uint Filter_SetMode(uint mode);
        unsafe uint Filter_GetMode(ref uint mode);
        uint Filter_SetThreshold(float threshold);
        unsafe uint Filter_GetThreshold(ref float threshold);
        unsafe uint Filter_SetDataAveragingMode(int mode);
        unsafe uint Filter_GetDataAveragingMode(ref int mode);
        unsafe uint Filter_SetAveragingFrameCount(int frames);
        unsafe uint Filter_GetAveragingFrameCount(ref int frames);
        unsafe uint Filter_SetAveragingFactor(int averagingFactor);
        unsafe uint Filter_GetAveragingFactor(ref int averagingFactor);
        unsafe uint PostProcessNoiseFilter(int[] pInputImage, int[] pOutputImage, int iOutputBufferSize, int iBaseline, int iMode, float fThreshold, int iHeight, int iWidth);
        unsafe uint PostProcessCountConvert(int[] pInputImage, int[] pOutputImage, int iOutputBufferSize, int iNumImages, int iBaseline, int iMode, int iEmGain, float fQE, float fSensitivity, int iHeight, int iWidth);
        unsafe uint PostProcessPhotonCounting(int[] pInputImage, int[] pOutputImage, int iOutputBufferSize, int iNumImages, int iNumframes, int iNumberOfThresholds, ref float pfThreshold, int iHeight, int iWidth);
        unsafe uint PostProcessDataAveraging(int[] pInputImage, int[] pOutputImage, int iOutputBufferSize, int iNumImages, int iAveragingFilterMode, int iHeight, int iWidth, int iFrameCount, int iAveragingFactor);
    }
}